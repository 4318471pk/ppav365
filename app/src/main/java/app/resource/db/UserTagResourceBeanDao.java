package app.resource.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.live.fox.entity.UserTagResourceBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_TAG_RESOURCE_BEAN".
*/
public class UserTagResourceBeanDao extends AbstractDao<UserTagResourceBean, Long> {

    public static final String TABLENAME = "USER_TAG_RESOURCE_BEAN";

    /**
     * Properties of entity UserTagResourceBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property VipName = new Property(1, String.class, "vipName", false, "VIP_NAME");
        public final static Property VipLevel = new Property(2, int.class, "vipLevel", false, "VIP_LEVEL");
        public final static Property VipImg = new Property(3, String.class, "vipImg", false, "VIP_IMG");
        public final static Property VipFrams = new Property(4, String.class, "vipFrams", false, "VIP_FRAMS");
        public final static Property Type = new Property(5, int.class, "type", false, "TYPE");
        public final static Property VipMount = new Property(6, int.class, "vipMount", false, "VIP_MOUNT");
        public final static Property VipMdeal = new Property(7, String.class, "vipMdeal", false, "VIP_MDEAL");
        public final static Property MedalUrl = new Property(8, String.class, "medalUrl", false, "MEDAL_URL");
        public final static Property PayType = new Property(9, int.class, "payType", false, "PAY_TYPE");
        public final static Property OpenPrice = new Property(10, int.class, "openPrice", false, "OPEN_PRICE");
        public final static Property OpenGiveDiamond = new Property(11, int.class, "openGiveDiamond", false, "OPEN_GIVE_DIAMOND");
        public final static Property RenewalPrice = new Property(12, int.class, "renewalPrice", false, "RENEWAL_PRICE");
        public final static Property RenewalGiveDiamond = new Property(13, int.class, "renewalGiveDiamond", false, "RENEWAL_GIVE_DIAMOND");
        public final static Property CreateTime = new Property(14, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(15, Long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property LocalShouldUpdate = new Property(16, int.class, "localShouldUpdate", false, "LOCAL_SHOULD_UPDATE");
        public final static Property LocalVipImgPath = new Property(17, String.class, "localVipImgPath", false, "LOCAL_VIP_IMG_PATH");
        public final static Property LocalMedalUrlPath = new Property(18, String.class, "localMedalUrlPath", false, "LOCAL_MEDAL_URL_PATH");
    }


    public UserTagResourceBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserTagResourceBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_TAG_RESOURCE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"VIP_NAME\" TEXT," + // 1: vipName
                "\"VIP_LEVEL\" INTEGER NOT NULL ," + // 2: vipLevel
                "\"VIP_IMG\" TEXT," + // 3: vipImg
                "\"VIP_FRAMS\" TEXT," + // 4: vipFrams
                "\"TYPE\" INTEGER NOT NULL ," + // 5: type
                "\"VIP_MOUNT\" INTEGER NOT NULL ," + // 6: vipMount
                "\"VIP_MDEAL\" TEXT," + // 7: vipMdeal
                "\"MEDAL_URL\" TEXT," + // 8: medalUrl
                "\"PAY_TYPE\" INTEGER NOT NULL ," + // 9: payType
                "\"OPEN_PRICE\" INTEGER NOT NULL ," + // 10: openPrice
                "\"OPEN_GIVE_DIAMOND\" INTEGER NOT NULL ," + // 11: openGiveDiamond
                "\"RENEWAL_PRICE\" INTEGER NOT NULL ," + // 12: renewalPrice
                "\"RENEWAL_GIVE_DIAMOND\" INTEGER NOT NULL ," + // 13: renewalGiveDiamond
                "\"CREATE_TIME\" INTEGER," + // 14: createTime
                "\"UPDATE_TIME\" INTEGER," + // 15: updateTime
                "\"LOCAL_SHOULD_UPDATE\" INTEGER NOT NULL ," + // 16: localShouldUpdate
                "\"LOCAL_VIP_IMG_PATH\" TEXT," + // 17: localVipImgPath
                "\"LOCAL_MEDAL_URL_PATH\" TEXT);"); // 18: localMedalUrlPath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_TAG_RESOURCE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserTagResourceBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String vipName = entity.getVipName();
        if (vipName != null) {
            stmt.bindString(2, vipName);
        }
        stmt.bindLong(3, entity.getVipLevel());
 
        String vipImg = entity.getVipImg();
        if (vipImg != null) {
            stmt.bindString(4, vipImg);
        }
 
        String vipFrams = entity.getVipFrams();
        if (vipFrams != null) {
            stmt.bindString(5, vipFrams);
        }
        stmt.bindLong(6, entity.getType());
        stmt.bindLong(7, entity.getVipMount());
 
        String vipMdeal = entity.getVipMdeal();
        if (vipMdeal != null) {
            stmt.bindString(8, vipMdeal);
        }
 
        String medalUrl = entity.getMedalUrl();
        if (medalUrl != null) {
            stmt.bindString(9, medalUrl);
        }
        stmt.bindLong(10, entity.getPayType());
        stmt.bindLong(11, entity.getOpenPrice());
        stmt.bindLong(12, entity.getOpenGiveDiamond());
        stmt.bindLong(13, entity.getRenewalPrice());
        stmt.bindLong(14, entity.getRenewalGiveDiamond());
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(15, createTime);
        }
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(16, updateTime);
        }
        stmt.bindLong(17, entity.getLocalShouldUpdate());
 
        String localVipImgPath = entity.getLocalVipImgPath();
        if (localVipImgPath != null) {
            stmt.bindString(18, localVipImgPath);
        }
 
        String localMedalUrlPath = entity.getLocalMedalUrlPath();
        if (localMedalUrlPath != null) {
            stmt.bindString(19, localMedalUrlPath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserTagResourceBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String vipName = entity.getVipName();
        if (vipName != null) {
            stmt.bindString(2, vipName);
        }
        stmt.bindLong(3, entity.getVipLevel());
 
        String vipImg = entity.getVipImg();
        if (vipImg != null) {
            stmt.bindString(4, vipImg);
        }
 
        String vipFrams = entity.getVipFrams();
        if (vipFrams != null) {
            stmt.bindString(5, vipFrams);
        }
        stmt.bindLong(6, entity.getType());
        stmt.bindLong(7, entity.getVipMount());
 
        String vipMdeal = entity.getVipMdeal();
        if (vipMdeal != null) {
            stmt.bindString(8, vipMdeal);
        }
 
        String medalUrl = entity.getMedalUrl();
        if (medalUrl != null) {
            stmt.bindString(9, medalUrl);
        }
        stmt.bindLong(10, entity.getPayType());
        stmt.bindLong(11, entity.getOpenPrice());
        stmt.bindLong(12, entity.getOpenGiveDiamond());
        stmt.bindLong(13, entity.getRenewalPrice());
        stmt.bindLong(14, entity.getRenewalGiveDiamond());
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(15, createTime);
        }
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(16, updateTime);
        }
        stmt.bindLong(17, entity.getLocalShouldUpdate());
 
        String localVipImgPath = entity.getLocalVipImgPath();
        if (localVipImgPath != null) {
            stmt.bindString(18, localVipImgPath);
        }
 
        String localMedalUrlPath = entity.getLocalMedalUrlPath();
        if (localMedalUrlPath != null) {
            stmt.bindString(19, localMedalUrlPath);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserTagResourceBean readEntity(Cursor cursor, int offset) {
        UserTagResourceBean entity = new UserTagResourceBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // vipName
            cursor.getInt(offset + 2), // vipLevel
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // vipImg
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // vipFrams
            cursor.getInt(offset + 5), // type
            cursor.getInt(offset + 6), // vipMount
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // vipMdeal
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // medalUrl
            cursor.getInt(offset + 9), // payType
            cursor.getInt(offset + 10), // openPrice
            cursor.getInt(offset + 11), // openGiveDiamond
            cursor.getInt(offset + 12), // renewalPrice
            cursor.getInt(offset + 13), // renewalGiveDiamond
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // createTime
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // updateTime
            cursor.getInt(offset + 16), // localShouldUpdate
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // localVipImgPath
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // localMedalUrlPath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserTagResourceBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVipName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVipLevel(cursor.getInt(offset + 2));
        entity.setVipImg(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVipFrams(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.getInt(offset + 5));
        entity.setVipMount(cursor.getInt(offset + 6));
        entity.setVipMdeal(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMedalUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPayType(cursor.getInt(offset + 9));
        entity.setOpenPrice(cursor.getInt(offset + 10));
        entity.setOpenGiveDiamond(cursor.getInt(offset + 11));
        entity.setRenewalPrice(cursor.getInt(offset + 12));
        entity.setRenewalGiveDiamond(cursor.getInt(offset + 13));
        entity.setCreateTime(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setUpdateTime(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setLocalShouldUpdate(cursor.getInt(offset + 16));
        entity.setLocalVipImgPath(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setLocalMedalUrlPath(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserTagResourceBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserTagResourceBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserTagResourceBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
