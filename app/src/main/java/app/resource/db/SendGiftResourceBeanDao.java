package app.resource.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.live.fox.entity.SendGiftResourceBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SEND_GIFT_RESOURCE_BEAN".
*/
public class SendGiftResourceBeanDao extends AbstractDao<SendGiftResourceBean, Long> {

    public static final String TABLENAME = "SEND_GIFT_RESOURCE_BEAN";

    /**
     * Properties of entity SendGiftResourceBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Cflag = new Property(1, String.class, "cflag", false, "CFLAG");
        public final static Property Eflag = new Property(2, String.class, "eflag", false, "EFLAG");
        public final static Property Amount = new Property(3, int.class, "amount", false, "AMOUNT");
        public final static Property Sort = new Property(4, int.class, "sort", false, "SORT");
        public final static Property CreateTime = new Property(5, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(6, Long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property LocalShouldUpdate = new Property(7, int.class, "localShouldUpdate", false, "LOCAL_SHOULD_UPDATE");
        public final static Property LocalImgPath = new Property(8, String.class, "localImgPath", false, "LOCAL_IMG_PATH");
        public final static Property LocalSvgPath = new Property(9, String.class, "localSvgPath", false, "LOCAL_SVG_PATH");
    }


    public SendGiftResourceBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SendGiftResourceBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEND_GIFT_RESOURCE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CFLAG\" TEXT," + // 1: cflag
                "\"EFLAG\" TEXT," + // 2: eflag
                "\"AMOUNT\" INTEGER NOT NULL ," + // 3: amount
                "\"SORT\" INTEGER NOT NULL ," + // 4: sort
                "\"CREATE_TIME\" INTEGER," + // 5: createTime
                "\"UPDATE_TIME\" INTEGER," + // 6: updateTime
                "\"LOCAL_SHOULD_UPDATE\" INTEGER NOT NULL ," + // 7: localShouldUpdate
                "\"LOCAL_IMG_PATH\" TEXT," + // 8: localImgPath
                "\"LOCAL_SVG_PATH\" TEXT);"); // 9: localSvgPath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEND_GIFT_RESOURCE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SendGiftResourceBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cflag = entity.getCflag();
        if (cflag != null) {
            stmt.bindString(2, cflag);
        }
 
        String eflag = entity.getEflag();
        if (eflag != null) {
            stmt.bindString(3, eflag);
        }
        stmt.bindLong(4, entity.getAmount());
        stmt.bindLong(5, entity.getSort());
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(6, createTime);
        }
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(7, updateTime);
        }
        stmt.bindLong(8, entity.getLocalShouldUpdate());
 
        String localImgPath = entity.getLocalImgPath();
        if (localImgPath != null) {
            stmt.bindString(9, localImgPath);
        }
 
        String localSvgPath = entity.getLocalSvgPath();
        if (localSvgPath != null) {
            stmt.bindString(10, localSvgPath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SendGiftResourceBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cflag = entity.getCflag();
        if (cflag != null) {
            stmt.bindString(2, cflag);
        }
 
        String eflag = entity.getEflag();
        if (eflag != null) {
            stmt.bindString(3, eflag);
        }
        stmt.bindLong(4, entity.getAmount());
        stmt.bindLong(5, entity.getSort());
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(6, createTime);
        }
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(7, updateTime);
        }
        stmt.bindLong(8, entity.getLocalShouldUpdate());
 
        String localImgPath = entity.getLocalImgPath();
        if (localImgPath != null) {
            stmt.bindString(9, localImgPath);
        }
 
        String localSvgPath = entity.getLocalSvgPath();
        if (localSvgPath != null) {
            stmt.bindString(10, localSvgPath);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SendGiftResourceBean readEntity(Cursor cursor, int offset) {
        SendGiftResourceBean entity = new SendGiftResourceBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cflag
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // eflag
            cursor.getInt(offset + 3), // amount
            cursor.getInt(offset + 4), // sort
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // createTime
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // updateTime
            cursor.getInt(offset + 7), // localShouldUpdate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // localImgPath
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // localSvgPath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SendGiftResourceBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCflag(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEflag(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAmount(cursor.getInt(offset + 3));
        entity.setSort(cursor.getInt(offset + 4));
        entity.setCreateTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setUpdateTime(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setLocalShouldUpdate(cursor.getInt(offset + 7));
        entity.setLocalImgPath(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLocalSvgPath(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SendGiftResourceBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SendGiftResourceBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SendGiftResourceBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
