package app.resource.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.live.fox.entity.UserGuardResourceBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_GUARD_RESOURCE_BEAN".
*/
public class UserGuardResourceBeanDao extends AbstractDao<UserGuardResourceBean, Long> {

    public static final String TABLENAME = "USER_GUARD_RESOURCE_BEAN";

    /**
     * Properties of entity UserGuardResourceBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property ImgUrl = new Property(2, String.class, "imgUrl", false, "IMG_URL");
        public final static Property MedalUrl = new Property(3, String.class, "medalUrl", false, "MEDAL_URL");
        public final static Property OpenType = new Property(4, int.class, "openType", false, "OPEN_TYPE");
        public final static Property OpenPrice = new Property(5, int.class, "openPrice", false, "OPEN_PRICE");
        public final static Property RenewalPrice = new Property(6, int.class, "renewalPrice", false, "RENEWAL_PRICE");
        public final static Property Status = new Property(7, int.class, "status", false, "STATUS");
        public final static Property CreateTime = new Property(8, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(9, Long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property GuardLevel = new Property(10, int.class, "guardLevel", false, "GUARD_LEVEL");
        public final static Property LocalShouldUpdate = new Property(11, int.class, "localShouldUpdate", false, "LOCAL_SHOULD_UPDATE");
        public final static Property LocalImgSmallPath = new Property(12, String.class, "localImgSmallPath", false, "LOCAL_IMG_SMALL_PATH");
        public final static Property LocalImgMediumPath = new Property(13, String.class, "localImgMediumPath", false, "LOCAL_IMG_MEDIUM_PATH");
    }


    public UserGuardResourceBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserGuardResourceBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_GUARD_RESOURCE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"IMG_URL\" TEXT," + // 2: imgUrl
                "\"MEDAL_URL\" TEXT," + // 3: medalUrl
                "\"OPEN_TYPE\" INTEGER NOT NULL ," + // 4: openType
                "\"OPEN_PRICE\" INTEGER NOT NULL ," + // 5: openPrice
                "\"RENEWAL_PRICE\" INTEGER NOT NULL ," + // 6: renewalPrice
                "\"STATUS\" INTEGER NOT NULL ," + // 7: status
                "\"CREATE_TIME\" INTEGER," + // 8: createTime
                "\"UPDATE_TIME\" INTEGER," + // 9: updateTime
                "\"GUARD_LEVEL\" INTEGER NOT NULL ," + // 10: guardLevel
                "\"LOCAL_SHOULD_UPDATE\" INTEGER NOT NULL ," + // 11: localShouldUpdate
                "\"LOCAL_IMG_SMALL_PATH\" TEXT," + // 12: localImgSmallPath
                "\"LOCAL_IMG_MEDIUM_PATH\" TEXT);"); // 13: localImgMediumPath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_GUARD_RESOURCE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserGuardResourceBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(3, imgUrl);
        }
 
        String medalUrl = entity.getMedalUrl();
        if (medalUrl != null) {
            stmt.bindString(4, medalUrl);
        }
        stmt.bindLong(5, entity.getOpenType());
        stmt.bindLong(6, entity.getOpenPrice());
        stmt.bindLong(7, entity.getRenewalPrice());
        stmt.bindLong(8, entity.getStatus());
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(9, createTime);
        }
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(10, updateTime);
        }
        stmt.bindLong(11, entity.getGuardLevel());
        stmt.bindLong(12, entity.getLocalShouldUpdate());
 
        String localImgSmallPath = entity.getLocalImgSmallPath();
        if (localImgSmallPath != null) {
            stmt.bindString(13, localImgSmallPath);
        }
 
        String localImgMediumPath = entity.getLocalImgMediumPath();
        if (localImgMediumPath != null) {
            stmt.bindString(14, localImgMediumPath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserGuardResourceBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(3, imgUrl);
        }
 
        String medalUrl = entity.getMedalUrl();
        if (medalUrl != null) {
            stmt.bindString(4, medalUrl);
        }
        stmt.bindLong(5, entity.getOpenType());
        stmt.bindLong(6, entity.getOpenPrice());
        stmt.bindLong(7, entity.getRenewalPrice());
        stmt.bindLong(8, entity.getStatus());
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(9, createTime);
        }
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(10, updateTime);
        }
        stmt.bindLong(11, entity.getGuardLevel());
        stmt.bindLong(12, entity.getLocalShouldUpdate());
 
        String localImgSmallPath = entity.getLocalImgSmallPath();
        if (localImgSmallPath != null) {
            stmt.bindString(13, localImgSmallPath);
        }
 
        String localImgMediumPath = entity.getLocalImgMediumPath();
        if (localImgMediumPath != null) {
            stmt.bindString(14, localImgMediumPath);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserGuardResourceBean readEntity(Cursor cursor, int offset) {
        UserGuardResourceBean entity = new UserGuardResourceBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imgUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // medalUrl
            cursor.getInt(offset + 4), // openType
            cursor.getInt(offset + 5), // openPrice
            cursor.getInt(offset + 6), // renewalPrice
            cursor.getInt(offset + 7), // status
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // createTime
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // updateTime
            cursor.getInt(offset + 10), // guardLevel
            cursor.getInt(offset + 11), // localShouldUpdate
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // localImgSmallPath
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // localImgMediumPath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserGuardResourceBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImgUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMedalUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOpenType(cursor.getInt(offset + 4));
        entity.setOpenPrice(cursor.getInt(offset + 5));
        entity.setRenewalPrice(cursor.getInt(offset + 6));
        entity.setStatus(cursor.getInt(offset + 7));
        entity.setCreateTime(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setUpdateTime(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setGuardLevel(cursor.getInt(offset + 10));
        entity.setLocalShouldUpdate(cursor.getInt(offset + 11));
        entity.setLocalImgSmallPath(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLocalImgMediumPath(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserGuardResourceBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserGuardResourceBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserGuardResourceBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
